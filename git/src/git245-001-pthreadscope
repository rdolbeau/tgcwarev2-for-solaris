diff -ur git-2.4.5.orig/builtin/grep.c git-2.4.5/builtin/grep.c
--- git-2.4.5.orig/builtin/grep.c	2015-06-25 21:15:40.000000000 +0200
+++ git-2.4.5/builtin/grep.c	2015-11-24 20:05:18.476277692 +0100
@@ -209,10 +209,19 @@
 	for (i = 0; i < ARRAY_SIZE(threads); i++) {
 		int err;
 		struct grep_opt *o = grep_opt_dup(opt);
+		pthread_attr_t attr;
 		o->output = strbuf_out;
 		o->debug = 0;
 		compile_grep_patterns(o);
-		err = pthread_create(&threads[i], NULL, run, o);
+		err = pthread_attr_init(&attr);
+		if (err)
+			die(_("grep: failed to init thread attr: %s"),
+			    strerror(err));
+		err = pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
+		if (err)
+			die(_("grep: failed to alter thread attr: %s"),
+			    strerror(err));
+		err = pthread_create(&threads[i], &attr, run, o);
 
 		if (err)
 			die(_("grep: failed to create thread: %s"),
diff -ur git-2.4.5.orig/builtin/index-pack.c git-2.4.5/builtin/index-pack.c
--- git-2.4.5.orig/builtin/index-pack.c	2015-06-25 21:15:40.000000000 +0200
+++ git-2.4.5/builtin/index-pack.c	2015-11-24 21:27:40.883275913 +0100
@@ -1127,8 +1127,18 @@
 	if (nr_threads > 1 || getenv("GIT_FORCE_THREADS")) {
 		init_thread();
 		for (i = 0; i < nr_threads; i++) {
-			int ret = pthread_create(&thread_data[i].thread, NULL,
-						 threaded_second_pass, thread_data + i);
+			int ret;
+			pthread_attr_t attr;
+			ret = pthread_attr_init(&attr);
+			if (ret)
+				die(_("grep: failed to init thread attr: %s"),
+				    strerror(ret));
+			ret = pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
+			if (ret)
+				die(_("grep: failed to alter thread attr: %s"),
+				    strerror(ret));
+			ret = pthread_create(&thread_data[i].thread, &attr,
+					     threaded_second_pass, thread_data + i);
 			if (ret)
 				die(_("unable to create thread: %s"),
 				    strerror(ret));
diff -ur git-2.4.5.orig/builtin/pack-objects.c git-2.4.5/builtin/pack-objects.c
--- git-2.4.5.orig/builtin/pack-objects.c	2015-06-25 21:15:40.000000000 +0200
+++ git-2.4.5/builtin/pack-objects.c	2015-11-24 23:17:47.630452315 +0100
@@ -2012,11 +2012,20 @@
 
 	/* Start work threads. */
 	for (i = 0; i < delta_search_threads; i++) {
+		pthread_attr_t attr;
 		if (!p[i].list_size)
 			continue;
 		pthread_mutex_init(&p[i].mutex, NULL);
 		pthread_cond_init(&p[i].cond, NULL);
-		ret = pthread_create(&p[i].thread, NULL,
+		ret = pthread_attr_init(&attr);
+		if (ret)
+			die(_("grep: failed to init thread attr: %s"),
+			    strerror(ret));
+		ret = pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
+		if (ret)
+			die(_("grep: failed to alter thread attr: %s"),
+			    strerror(ret));
+		ret = pthread_create(&p[i].thread, &attr,
 				     threaded_find_deltas, &p[i]);
 		if (ret)
 			die("unable to create thread: %s", strerror(ret));
diff -ur git-2.4.5.orig/preload-index.c git-2.4.5/preload-index.c
--- git-2.4.5.orig/preload-index.c	2015-06-25 21:15:40.000000000 +0200
+++ git-2.4.5/preload-index.c	2015-11-24 20:05:23.852024510 +0100
@@ -86,13 +86,23 @@
 	memset(&data, 0, sizeof(data));
 	for (i = 0; i < threads; i++) {
 		struct thread_data *p = data+i;
+		int err;
+		pthread_attr_t attr;
 		p->index = index;
 		if (pathspec)
 			copy_pathspec(&p->pathspec, pathspec);
 		p->offset = offset;
 		p->nr = work;
 		offset += work;
-		if (pthread_create(&p->pthread, NULL, preload_thread, p))
+		err = pthread_attr_init(&attr);
+		if (err)
+			die(_("grep: failed to init thread attr: %s"),
+			    strerror(err));
+		err = pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
+		if (err)
+			die(_("grep: failed to alter thread attr: %s"),
+			    strerror(err));
+		if (pthread_create(&p->pthread, &attr, preload_thread, p))
 			die("unable to create threaded lstat");
 	}
 	for (i = 0; i < threads; i++) {
diff -ur git-2.4.5.orig/transport-helper.c git-2.4.5/transport-helper.c
--- git-2.4.5.orig/transport-helper.c	2015-06-25 21:15:40.000000000 +0200
+++ git-2.4.5/transport-helper.c	2015-11-24 20:07:46.685297266 +0100
@@ -1240,7 +1240,16 @@
 	pthread_t ptg_thread;
 	int err;
 	int ret = 0;
-	err = pthread_create(&gtp_thread, NULL, udt_copy_task_routine,
+	pthread_attr_t attr;
+	err = pthread_attr_init(&attr);
+	if (err)
+		die(_("grep: failed to init thread attr: %s"),
+		    strerror(err));
+	err = pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
+	if (err)
+		die(_("grep: failed to alter thread attr: %s"),
+		    strerror(err));
+	err = pthread_create(&gtp_thread, &attr, udt_copy_task_routine,
 		&s->gtp);
 	if (err)
 		die("Can't start thread for copying data: %s", strerror(err));
